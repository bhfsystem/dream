#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  cd "$shome"

  local nm_packer_builder=

  case "${VAGRANT_DEFAULT_PROVIDER:-}" in
    vmware*)    nm_packer_builder="vmware-${BASEBOX_TYPE:-iso}" ;;
    virtualbox) nm_packer_builder="virtualbox-${BASEBOX_TYPE:-iso}" ;;
    parallels)  nm_packer_builder="parallels-${BASEBOX_TYPE:-iso}" ;;
    docker)     nm_packer_builder='docker' ;;
    aws)        nm_packer_builder="amazon-ebs" ;;

    *)
      echo ERROR: "Invalid virtualization type: $VAGRANT_DEFAULT_PROVIDER" 1>&2
      return 1
      ;;
  esac

  if [[ -n "${1:-}" && "${nm_packer_builder}" != "docker" ]]; then
    export BASEBOX_NAME="${BASEBOX_NAME}-$1"
    shift
  fi

  local tmp_packer="$(mktemp -t XXXXXX)"
  cat "packer-${nm_packer_builder}.json" | \
    jq \
      --argfile p "$shome/packer.json" \
      --argfile t "$shome/packer-trusty.json" \
      '.provisioners[].scripts |= . + [
          "script/first.sh",
          "script/update.sh",
          "script/sshd.sh",
          "script/\(env.VAGRANT_DEFAULT_PROVIDER).sh",
          "script/cleanup.sh"
          ] | .variables |= ({___packer: ""} + $p + {___trusty: ""} + $t + {___custom: ""} + .)' | tee "$tmp_packer" | jq --arg builder "$nm_packer_builder" '.builders = [ .builders[] | select(.type == $builder) ]'

  export PACKER_TMP_DIR="${CACHE_DIR}/tmp/packer"
  mkdir -p "${PACKER_TMP_DIR}"
  packer build${nm_packer_builder:+ -only="$nm_packer_builder"} -force "$tmp_packer"
  rm -f "$tmp_packer"
}

source sub "$BASH_SOURCE" "$@"
