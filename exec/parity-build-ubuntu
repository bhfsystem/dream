#!/usr/bin/env bash

if [[ -z "${BASEBOX_DOCKER_IMAGE:-}" ]]; then
  export BASEBOX_DOCKER_IMAGE='ubuntu:latest'
fi

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  cd "$shome"

  local nm_packer_builder=
  local nm_provider=

  local nm_vm="ubuntu1404"

  case "$VAGRANT_DEFAULT_PROVIDER" in
    vmware_fusion|vmware_desktop)
      nm_provider="vmware_desktop"
      nm_packer_builder="vmware-${BASEBOX_TYPE:-iso}"
      ;;

    virtualbox)
      nm_provider="virtualbox"
      nm_packer_builder="virtualbox-${BASEBOX_TYPE:-iso}"
      ;;

    docker)
      nm_provider='docker'
      nm_packer_builder='docker'
      ;;

    aws)
      nm_provider="aws"
      nm_packer_builder="amazon-ebs"

      if [[ "$#" -gt 0 ]]; then
        AWS_DEFAULT_PROFILE="$1"; shift
      fi
      export AWS_DEFAULT_PROFILE

      nm_vm="${nm_vm}-${AWS_DEFAULT_PROFILE}"
      EC2_TARGET_AMI_NAME="packer-${AWS_DEFAULT_PROFILE}-$(date +%s)"
      export EC2_TARGET_AMI_NAME

      if [[ "$#" -gt 0 ]]; then
        EC2_SOURCE_AMI="$1"; shift
      else
        local ap_northeast_1=ami-d886a1b6
        local ap_southeast_1=ami-a17dbac2
        local ap_southeast_2=ami-067d2365
        local eu_central_1=ami-99cad9f5
        local eu_west_1=ami-a317ced0
        local sa_east_1=ami-ae44ffc2
        local us_east_1=ami-f7136c9d
        local us_west_1=ami-44b1de24
        local us_west_2=ami-46a3b427

        eval EC2_SOURCE_AMI="\$${AWS_DEFAULT_PROFILE//-/_}"
      fi
      export EC2_SOURCE_AMI

      if [[ "$#" -gt 0 ]]; then
        EC2_INSTANCE_TYPE="$1"; shift
      else
        EC2_INSTANCE_TYPE='c4.large'
      fi
      export EC2_INSTANCE_TYPE
      ;;

    *)
      echo ERROR: "Invalid virtualization type: $nm_provider" 1>&2
      return 1
      ;;
  esac

  local tmp_packer="$(mktemp -t XXXXXX)"
  cat "packer.json" | jq \
    --arg provider "$nm_provider" '.provisioners[].scripts = 
    [ "script/first.sh",
      "script/update.sh",
      "script/sshd.sh",
      "script/ubuntu.sh",
      "script/network.sh",
      "script/\($provider).sh",
      "script/site.sh",
      "script/cleanup.sh",
      "script/last.sh" 
      ]' | tee "$tmp_packer"

  local tmp_options="$(mktemp -t XXXXXX)"
  jq -n \
    --arg provider "$nm_provider" \
    --arg vm_name "$nm_vm" \
    --arg iso_path "$shome/iso" \
    --arg iso_dir "$shome" \
    '{  
        iso_path: $iso_path, 
        iso_dir: $iso_dir,
        provider: $provider,
        vm_name: $vm_name
     }' | tee "$tmp_options"

  packer build${nm_packer_builder:+ -only="$nm_packer_builder"} -var-file "$tmp_options" "$tmp_packer"
  rm -f "$tmp_options" "$tmp_packer"
}

env | grep BASEBOX

source sub "$BASH_SOURCE" "$@"
