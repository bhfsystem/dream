#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"

  local json_var='{}'

  local nm_only
  local nm_provider
  local nm_region
  local nm_vm="ubuntu1404"
  local fl_vagrant_key="false"
  local api_token=

  if [[ "$#" == 0 ]]; then
    set -- virtualbox
  fi

  if [[ -n "${1:-}" ]]; then
    nm_only="$1"; shift
  fi

  case "$nm_only" in
    virtualbox|vmware|parallels)
      nm_provider="${nm_only}"
      nm_only="${nm_only}-iso"
      fl_vagrant_key="true"
      true ;;
    digitalocean)
      nm_provider="${nm_only}"
      if [[ "$#" -gt 0 ]]; then
        nm_region="$1"; shift
      else
        nm_region="sfo1"
      fi
      nm_vm="${nm_vm}-${nm_region}"
      api_token="$DIGITALOCEAN_API_TOKEN"
      ;;
    "")
      true ;;
    "{"*)
      json_var="$nm_only"
      nm_only=
      ;;
    *)
      echo ERROR: "Invalid virtualization type: $nm_provider" 1>&2
      return 1
      ;;
  esac

  case "${1:-}" in
    "{"*)
      json_var="$1"; shift
      ;;
  esac

  cd "$shome"
  local tmp_options="$(mktemp -t XXXXXX)"
  local tmp_ubuntu="$(mktemp -t XXXXXX)"
  jq -n --arg iso_path "$shome/iso" \
        --arg api_token "$api_token" \
        --arg provider "$nm_provider" \
        --arg region "$nm_region" \
        --arg vm_name "$nm_vm" \
        --arg install_vagrant_key "$fl_vagrant_key" \
        --argfile ubuntu ubuntu1404.json '$ubuntu + { headless: "true", 
                                                      iso_path: $iso_path, 
                                                      ssh_username: "ubuntu",
                                                      docker: "true",
                                                      update: "true",
                                                      install_vagrant_key: $install_vagrant_key,
                                                      api_key: $api_token,
                                                      provider: $provider,
                                                      region: $region,
                                                      vm_name: $vm_name,
                                                      cpus: "2" }' | tee "$tmp_options"
  cat ubuntu.json | jq --arg provider "$nm_provider" \
                                         '.provisioners[].scripts = [
                                                      "script/update.sh",
                                                      "script/vagrant.sh",
                                                      "script/sshd.sh",
                                                      "script/\($provider).sh",
                                                      "script/docker.sh",
                                                      "custom-script.sh",
                                                      "script/cleanup.sh",
                                                      "script/ubuntu.sh" ]' | tee "$tmp_ubuntu"
  packer build${nm_only:+ -only="$nm_only"} -var-file "$tmp_options" "$tmp_ubuntu"
  rm -f "$tmp_options" "$tmp_ubuntu"
}

source sub "$0" "$@"
